/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */

#include <stdarg.h>
#include <touchgfx/TextProvider.hpp>
#include <touchgfx/Texts.hpp>
#include <touchgfx/TypedText.hpp>
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
    va_end(pArg);
    return width;
}

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
    va_end(pArg);
    return width;
}

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
    {
        substituteGlyphs();
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
}

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
    va_list pArg;
    va_start(pArg, format);
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
    va_end(pArg);
}

// Default TypedTextDatabase
extern const touchgfx::TypedText::TypedTextData* const typedTextDatabaseArray[];

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern const touchgfx::Unicode::UnicodeChar texts_all_languages[] TEXT_LOCATION_FLASH_ATTRIBUTE = {
    0x50, 0x4f, 0x49, 0x53, 0x53, 0x4f, 0x4e, 0x20, 0x56, 0x41, 0x50, 0x45, 0x55, 0x52, 0x20, 0x2d, 0x20, 0x32, 0x38, 0x20, 0x4d, 0x49, 0x4e, 0x0, // @0 "POISSON VAPEUR - 28 MIN"
    0x53, 0x54, 0x45, 0x41, 0x4d, 0x20, 0x46, 0x49, 0x53, 0x48, 0x20, 0x2d, 0x20, 0x32, 0x38, 0x20, 0x4d, 0x49, 0x4e, 0x0, // @24 "STEAM FISH - 28 MIN"
    0x57, 0x48, 0x49, 0x54, 0x45, 0x20, 0x52, 0x49, 0x43, 0x45, 0x20, 0x2d, 0x20, 0x33, 0x30, 0x20, 0x4d, 0x49, 0x4e, 0x0, // @44 "WHITE RICE - 30 MIN"
    0x44, 0x55, 0x4d, 0x50, 0x4c, 0x49, 0x4e, 0x47, 0x53, 0x20, 0x2d, 0x20, 0x37, 0x30, 0x20, 0x4d, 0x49, 0x4e, 0x0, // @64 "DUMPLINGS - 70 MIN"
    0x52, 0x49, 0x5a, 0x20, 0x42, 0x4c, 0x41, 0x4e, 0x43, 0x20, 0x2d, 0x20, 0x33, 0x30, 0x20, 0x4d, 0x49, 0x4e, 0x0, // @83 "RIZ BLANC - 30 MIN"
    0x50, 0x41, 0x4e, 0x43, 0x41, 0x4b, 0x45, 0x53, 0x20, 0x2d, 0x20, 0x31, 0x32, 0x20, 0x4d, 0x49, 0x4e, 0x0, // @102 "PANCAKES - 12 MIN"
    0x2, 0x3a, 0x2, 0x0, // @120 "<>:<>"
    0x50, 0x4f, 0x49, 0x53, 0x53, 0x4f, 0x4e, 0x20, 0x56, 0x41, 0x50, 0x45, 0x55, 0x52, 0x0, // @124 "POISSON VAPEUR"
    0x48, 0x45, 0x55, 0x52, 0x45, 0x20, 0x2f, 0x20, 0x44, 0x41, 0x54, 0x45, 0x0, // @139 "HEURE / DATE"
    0x30d1, 0x30f3, 0x30b1, 0x30fc, 0x30ad, 0x20, 0x2d, 0x20, 0x31, 0x32, 0x20, 0x5206, 0x0, // @152 "????? - 12 ?"
    0x54, 0x49, 0x4d, 0x45, 0x20, 0x2f, 0x20, 0x44, 0x41, 0x54, 0x45, 0x0, // @165 "TIME / DATE"
    0xd32c, 0xcf00, 0xc774, 0xd06c, 0x20, 0x2d, 0x20, 0x31, 0x32, 0x20, 0xbd84, 0x0, // @177 "???? - 12 ?"
    0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x52, 0x45, 0x53, 0x0, // @189 "PARAMETRES"
    0x53, 0x54, 0x45, 0x41, 0x4d, 0x20, 0x46, 0x49, 0x53, 0x48, 0x0, // @200 "STEAM FISH"
    0x57, 0x48, 0x49, 0x54, 0x45, 0x20, 0x52, 0x49, 0x43, 0x45, 0x0, // @211 "WHITE RICE"
    0x5c0f, 0x7c60, 0x5305, 0x20, 0x2d, 0x20, 0x37, 0x30, 0x20, 0x5206, 0x0, // @222 "??? - 70 ?"
    0xc0dd, 0xc120, 0xcc1c, 0x20, 0x2d, 0x20, 0x32, 0x38, 0x20, 0xbd84, 0x0, // @233 "??? - 28 ?"
    0x2, 0x20, 0x3a, 0x0, // @244 "<> :"
    0x44, 0x55, 0x4d, 0x50, 0x4c, 0x49, 0x4e, 0x47, 0x53, 0x0, // @248 "DUMPLINGS"
    0x52, 0x49, 0x5a, 0x20, 0x42, 0x4c, 0x41, 0x4e, 0x43, 0x0, // @258 "RIZ BLANC"
    0x716e, 0x9b5a, 0x20, 0x2d, 0x20, 0x32, 0x38, 0x20, 0x5206, 0x0, // @268 "?? - 28 ?"
    0x767d, 0x7c73, 0x20, 0x2d, 0x20, 0x33, 0x30, 0x20, 0x5206, 0x0, // @278 "?? - 30 ?"
    0xb9cc, 0xb450, 0x20, 0x2d, 0x20, 0x37, 0x30, 0x20, 0xbd84, 0x0, // @288 "?? - 70 ?"
    0xbc31, 0xbbf8, 0x20, 0x2d, 0x20, 0x33, 0x30, 0x20, 0xbd84, 0x0, // @298 "?? - 30 ?"
    0x46, 0x72, 0x61, 0x6e, 0xe7, 0x61, 0x69, 0x73, 0x0, // @308 "Fran?ais"
    0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x0, // @317 "LANGUAGE"
    0x50, 0x41, 0x4e, 0x43, 0x41, 0x4b, 0x45, 0x53, 0x0, // @326 "PANCAKES"
    0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x0, // @335 "SETTINGS"
    0x45, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x0, // @344 "English"
    0x6642, 0x9593, 0x20, 0x2f, 0x20, 0x65e5, 0x4ed8, 0x0, // @352 "?? / ??"
    0xc2dc, 0xac04, 0x20, 0x2f, 0x20, 0xb0a0, 0xc9dc, 0x0, // @360 "?? / ??"
    0x48, 0x65, 0x75, 0x72, 0x65, 0x3a, 0x0, // @368 "Heure:"
    0x4c, 0x41, 0x4e, 0x47, 0x55, 0x45, 0x0, // @375 "LANGUE"
    0x53, 0x54, 0x41, 0x52, 0x54, 0x0, // @382 "START"
    0x54, 0x69, 0x6d, 0x65, 0x3a, 0x0, // @388 "Time:"
    0x30d1, 0x30f3, 0x30b1, 0x30fc, 0x30ad, 0x0, // @394 "?????"
    0xd32c, 0xcf00, 0xc774, 0xd06c, 0x0, // @400 "????"
    0x5c0f, 0x7c60, 0x5305, 0x0, // @405 "???"
    0x65e5, 0x672c, 0x8a9e, 0x0, // @409 "???"
    0x6642, 0x9593, 0x3a, 0x0, // @413 "??:"
    0xc0dd, 0xc120, 0xcc1c, 0x0, // @417 "???"
    0xc2dc, 0xac04, 0x3a, 0x0, // @421 "??:"
    0xd55c, 0xad6d, 0xc5b4, 0x0, // @425 "???"
    0x30, 0x30, 0x0, // @429 "00"
    0x31, 0x30, 0x0, // @432 "10"
    0x32, 0x30, 0x0, // @435 "20"
    0x716e, 0x9b5a, 0x0, // @438 "??"
    0x767d, 0x7c73, 0x0, // @441 "??"
    0x8a00, 0x8a9e, 0x0, // @444 "??"
    0x8a2d, 0x5b9a, 0x0, // @447 "??"
    0x958b, 0x59cb, 0x0, // @450 "??"
    0xb9cc, 0xb450, 0x0, // @453 "??"
    0xbc31, 0xbbf8, 0x0, // @456 "??"
    0xc124, 0xc815, 0x0, // @459 "??"
    0xc2dc, 0xc791, 0x0, // @462 "??"
    0xc5b8, 0xc5b4, 0x0 // @465 "??"
};

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern const uint32_t indicesGb[] TEXT_LOCATION_FLASH_ATTRIBUTE;

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern const uint32_t indicesFr[] TEXT_LOCATION_FLASH_ATTRIBUTE;

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern const uint32_t indicesJp[] TEXT_LOCATION_FLASH_ATTRIBUTE;

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern const uint32_t indicesKr[] TEXT_LOCATION_FLASH_ATTRIBUTE;

// Array holding dynamically installed languages
struct TranslationHeader
{
    uint32_t offset_to_texts;
    uint32_t offset_to_indices;
    uint32_t offset_to_typedtext;
};
static const TranslationHeader* languagesArray[4] = { 0 };

// Compiled and linked in languages
static const uint32_t* const staticLanguageIndices[] = {
    indicesGb,
    indicesFr,
    indicesJp,
    indicesKr
};

touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 4)
    {
        if (languagesArray[id] != 0)
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
            currentLanguageIndices = staticLanguageIndices[id];
            currentLanguageTypedText = typedTextDatabaseArray[id];
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
    }
}

void touchgfx::Texts::setTranslation(touchgfx::LanguageId id, const void* translation)
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
}
