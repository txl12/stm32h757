/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/cooking_screen/CookingViewBase.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

CookingViewBase::CookingViewBase() :
    buttonCallback(this, &CookingViewBase::buttonCallbackHandler)
{
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
    
    __background.setPosition(0, 0, 1024, 600);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    cooking_background.setXY(0, 0);
    cooking_background.setBitmap(touchgfx::Bitmap(BITMAP_SELECTING_BACKGROUND_ID));
    add(cooking_background);

    corners_container.setPosition(0, 0, 320, 241);
    infoButton.setXY(0, 0);
    infoButton.setBitmaps(touchgfx::Bitmap(BITMAP_INFO_BUTTON_BACKGROUND_ID), touchgfx::Bitmap(BITMAP_INFO_BUTTON_WHITE_BACKGROUND_ID));
    infoButton.setAction(buttonCallback);
    corners_container.add(infoButton);

    settingsButton.setXY(269, 0);
    settingsButton.setBitmaps(touchgfx::Bitmap(BITMAP_SETTINGS_BUTTON_BACKGROUND_ID), touchgfx::Bitmap(BITMAP_SETTINGS_BUTTON_WHITE_BACKGROUND_ID));
    settingsButton.setAction(buttonCallback);
    corners_container.add(settingsButton);

    cancelButton.setXY(269, 189);
    cancelButton.setBitmaps(touchgfx::Bitmap(BITMAP_CANCEL_BUTTON_BACKGROUND_ID), touchgfx::Bitmap(BITMAP_CANCEL_BUTTON_WHITE_BACKGROUND_ID));
    cancelButton.setAlpha(0);
    cancelButton.setAction(buttonCallback);
    corners_container.add(cancelButton);

    timerImage.setXY(0, 189);
    timerImage.setBitmap(touchgfx::Bitmap(BITMAP_TIME_ICON_BACKGROUND_ID));
    timerImage.setAlpha(0);
    corners_container.add(timerImage);

    add(corners_container);

    selectedImage.setXY(105, 69);
    selectedImage.setBitmap(touchgfx::Bitmap(BITMAP_RICE_3D_ID));
    add(selectedImage);

    cookingCircle.setPosition(80, 40, 160, 160);
    cookingCircle.setCenter(80, 80);
    cookingCircle.setRadius(73);
    cookingCircle.setLineWidth(6.5f);
    cookingCircle.setArc(0, 165);
    cookingCircle.setCapPrecision(10);
    cookingCirclePainter.setColor(touchgfx::Color::getColorFromRGB(41, 0, 96));
    cookingCircle.setPainter(cookingCirclePainter);
    add(cookingCircle);

    clockTextArea.setPosition(114, 0, 93, 40);
    clockTextArea.setColor(touchgfx::Color::getColorFromRGB(41, 0, 96));
    clockTextArea.setLinespacing(0);
    touchgfx::Unicode::snprintf(clockTextAreaBuffer1, CLOCKTEXTAREABUFFER1_SIZE, "%s", touchgfx::TypedText(T_HOUR).getText());
    clockTextArea.setWildcard1(clockTextAreaBuffer1);
    touchgfx::Unicode::snprintf(clockTextAreaBuffer2, CLOCKTEXTAREABUFFER2_SIZE, "%s", touchgfx::TypedText(T_MINUTE).getText());
    clockTextArea.setWildcard2(clockTextAreaBuffer2);
    clockTextArea.setTypedText(touchgfx::TypedText(T_CLOCK));
    add(clockTextArea);

    cookingTimeTextArea.setPosition(52, 200, 100, 40);
    cookingTimeTextArea.setColor(touchgfx::Color::getColorFromRGB(41, 0, 96));
    cookingTimeTextArea.setLinespacing(0);
    touchgfx::Unicode::snprintf(cookingTimeTextAreaBuffer1, COOKINGTIMETEXTAREABUFFER1_SIZE, "%s", touchgfx::TypedText(T_HOUR).getText());
    cookingTimeTextArea.setWildcard1(cookingTimeTextAreaBuffer1);
    touchgfx::Unicode::snprintf(cookingTimeTextAreaBuffer2, COOKINGTIMETEXTAREABUFFER2_SIZE, "%s", touchgfx::TypedText(T_MINUTE).getText());
    cookingTimeTextArea.setWildcard2(cookingTimeTextAreaBuffer2);
    cookingTimeTextArea.setTypedText(touchgfx::TypedText(T_REMAININGCOOKINGTIME));
    cookingTimeTextArea.setAlpha(0);
    add(cookingTimeTextArea);

    optionTextArea.setPosition(146, 212, 128, 19);
    optionTextArea.setColor(touchgfx::Color::getColorFromRGB(41, 0, 96));
    optionTextArea.setLinespacing(0);
    optionTextArea.setTypedText(touchgfx::TypedText(T_SELECTEDWHITERICE));
    optionTextArea.setAlpha(0);
    add(optionTextArea);
}

CookingViewBase::~CookingViewBase()
{
    touchgfx::CanvasWidgetRenderer::resetBuffer();
}

void CookingViewBase::setupScreen()
{

}

void CookingViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &cancelButton)
    {
        //TouchScreenCancelButton
        //When cancelButton clicked call virtual function
        //Call pressCancelButtonAction
        pressCancelButtonAction();
    }
    if (&src == &settingsButton)
    {
        //TouchScreenSettingButtonAction
        //When settingsButton clicked call virtual function
        //Call pressSettingButtonAction
        pressSettingButtonAction();
    }
    if (&src == &infoButton)
    {
        //TouchScreenInfoButton
        //When infoButton clicked call virtual function
        //Call pressInfoButtonAction
        pressInfoButtonAction();
    }
}

void CookingViewBase::handleKeyEvent(uint8_t key)
{
    if(53 == key)
    {
        //HardwareCenterKeyAction
        //When hardware button 53 clicked call virtual function
        //Call pressCenterKeyFunction
        pressCenterKeyFunction();
    
    }

    if(50 == key)
    {
        //HardwareDownKeyAction
        //When hardware button 50 clicked call virtual function
        //Call pressDownKeyFunction
        pressDownKeyFunction();
    
    }

    if(56 == key)
    {
        //HardwareUpKeyAction
        //When hardware button 56 clicked call virtual function
        //Call pressUpKeyFunction
        pressUpKeyFunction();
    
    }

    if(54 == key)
    {
        //HardwareRightKeyAction
        //When hardware button 54 clicked call virtual function
        //Call pressRightKeyFunction
        pressRightKeyFunction();
    
    }

    if(52 == key)
    {
        //HardwareLeftKeyAction
        //When hardware button 52 clicked call virtual function
        //Call pressLeftKeyFunction
        pressLeftKeyFunction();
    
    }
}

void CookingViewBase::goToInformationMenu()
{
    //GoToInfoScreen
    //When goToInformationMenu is called change screen to Information
    //Go to Information with no screen transition
    application().gotoInformationScreenNoTransition();
}

void CookingViewBase::goToSettingMenu()
{
    //GoToSettingScreen
    //When goToSettingMenu is called change screen to Settings
    //Go to Settings with no screen transition
    application().gotoSettingsScreenNoTransition();
}

void CookingViewBase::goToSelectingMenu()
{
    //GoToSelectingMenuScreen
    //When goToSelectingMenu is called change screen to SelectingMenu
    //Go to SelectingMenu with no screen transition
    application().gotoSelectingMenuScreenNoTransition();
}
