/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/settings_screen/SettingsViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

SettingsViewBase::SettingsViewBase() :
    flexButtonCallback(this, &SettingsViewBase::flexButtonCallbackHandler),
    buttonCallback(this, &SettingsViewBase::buttonCallbackHandler)
{
    __background.setPosition(0, 0, 1024, 600);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    background.setXY(0, 0);
    background.setBitmap(touchgfx::Bitmap(BITMAP_EMPTY_BACKGROUND_ID));
    add(background);

    languageSettingContainer.setPosition(40, 69, 240, 50);
    selectedLanguageBackground.setPosition(0, 0, 240, 50);
    selectedLanguageBackgroundLeft.setXY(0, 0);
    selectedLanguageBackgroundLeft.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUND_SETTINGS_LANGUAGE_ID));
    selectedLanguageBackgroundLeft.setAlpha(0);
    selectedLanguageBackground.add(selectedLanguageBackgroundLeft);

    selectedLanguageBackgroundMiddle.setPosition(51, 0, 181, 50);
    selectedLanguageBackgroundMiddle.setColor(touchgfx::Color::getColorFromRGB(41, 0, 96));
    selectedLanguageBackgroundMiddle.setAlpha(0);
    selectedLanguageBackground.add(selectedLanguageBackgroundMiddle);

    selectedLanguageBackgroundRight.setXY(232, 0);
    selectedLanguageBackgroundRight.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUND_SETTINGS_RIGHT_ID));
    selectedLanguageBackgroundRight.setAlpha(0);
    selectedLanguageBackground.add(selectedLanguageBackgroundRight);

    languageSettingContainer.add(selectedLanguageBackground);

    languageOptionsTextArea.setPosition(54, 10, 186, 31);
    languageOptionsTextArea.setColor(touchgfx::Color::getColorFromRGB(240, 175, 12));
    languageOptionsTextArea.setLinespacing(0);
    languageOptionsTextArea.setTypedText(touchgfx::TypedText(T_LANGUAGEOPTION));
    languageOptionsTextArea.setVisible(false);
    languageSettingContainer.add(languageOptionsTextArea);

    languageOptionsSettingsTextArea.setPosition(54, 10, 186, 31);
    languageOptionsSettingsTextArea.setColor(touchgfx::Color::getColorFromRGB(50, 255, 238));
    languageOptionsSettingsTextArea.setLinespacing(0);
    languageOptionsSettingsTextArea.setTypedText(touchgfx::TypedText(T_LANGUAGESETTINGS));
    languageOptionsSettingsTextArea.setAlpha(0);
    languageSettingContainer.add(languageOptionsSettingsTextArea);

    languageClickListener.setBoxWithBorderPosition(0, 0, 240, 50);
    languageClickListener.setBorderSize(5);
    languageClickListener.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
    languageClickListener.setAlpha(0);
    languageClickListener.setAction(flexButtonCallback);
    languageClickListener.setPosition(0, 1, 240, 50);
    languageSettingContainer.add(languageClickListener);

    add(languageSettingContainer);

    clockSettingContainer.setPosition(40, 144, 240, 50);
    selectedClockBackground.setPosition(0, 0, 240, 50);
    selectedClockBackgroundLeft.setXY(0, 0);
    selectedClockBackgroundLeft.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUND_SETTINGS_TIME_DATE_ID));
    selectedClockBackgroundLeft.setAlpha(0);
    selectedClockBackground.add(selectedClockBackgroundLeft);

    selectedClockBackgroundMiddle.setPosition(51, 0, 181, 50);
    selectedClockBackgroundMiddle.setColor(touchgfx::Color::getColorFromRGB(41, 0, 96));
    selectedClockBackgroundMiddle.setAlpha(0);
    selectedClockBackground.add(selectedClockBackgroundMiddle);

    selectedClockBackgroundRight.setXY(232, 0);
    selectedClockBackgroundRight.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUND_SETTINGS_RIGHT_ID));
    selectedClockBackgroundRight.setAlpha(0);
    selectedClockBackground.add(selectedClockBackgroundRight);

    clockSettingContainer.add(selectedClockBackground);

    hourSettingTextArea.setPosition(92, 10, 63, 31);
    hourSettingTextArea.setColor(touchgfx::Color::getColorFromRGB(240, 175, 12));
    hourSettingTextArea.setLinespacing(0);
    Unicode::snprintf(hourSettingTextAreaBuffer, HOURSETTINGTEXTAREA_SIZE, "%s", touchgfx::TypedText(T_HOURSETTINGINIT).getText());
    hourSettingTextArea.setWildcard(hourSettingTextAreaBuffer);
    hourSettingTextArea.setTypedText(touchgfx::TypedText(T_HOURSETTING));
    hourSettingTextArea.setVisible(false);
    clockSettingContainer.add(hourSettingTextArea);

    hourClickListener.setBoxWithBorderPosition(0, 0, 70, 50);
    hourClickListener.setBorderSize(5);
    hourClickListener.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
    hourClickListener.setAlpha(0);
    hourClickListener.setAction(flexButtonCallback);
    hourClickListener.setPosition(62, 0, 70, 50);
    clockSettingContainer.add(hourClickListener);

    minuteSettingTextArea.setPosition(142, 10, 56, 31);
    minuteSettingTextArea.setColor(touchgfx::Color::getColorFromRGB(50, 255, 238));
    minuteSettingTextArea.setLinespacing(0);
    Unicode::snprintf(minuteSettingTextAreaBuffer, MINUTESETTINGTEXTAREA_SIZE, "%s", touchgfx::TypedText(T_MINUTESETTINGINIT).getText());
    minuteSettingTextArea.setWildcard(minuteSettingTextAreaBuffer);
    minuteSettingTextArea.setTypedText(touchgfx::TypedText(T_MINUTESETTING));
    minuteSettingTextArea.setVisible(false);
    clockSettingContainer.add(minuteSettingTextArea);

    minuteClickListener.setBoxWithBorderPosition(0, 0, 70, 50);
    minuteClickListener.setBorderSize(5);
    minuteClickListener.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
    minuteClickListener.setAlpha(0);
    minuteClickListener.setAction(flexButtonCallback);
    minuteClickListener.setPosition(154, 0, 70, 50);
    clockSettingContainer.add(minuteClickListener);

    hourDateOptionSettings.setPosition(54, 10, 186, 31);
    hourDateOptionSettings.setColor(touchgfx::Color::getColorFromRGB(50, 255, 238));
    hourDateOptionSettings.setLinespacing(0);
    hourDateOptionSettings.setTypedText(touchgfx::TypedText(T_DATE_TIME));
    hourDateOptionSettings.setAlpha(0);
    clockSettingContainer.add(hourDateOptionSettings);

    clockClickListener.setBoxWithBorderPosition(0, 0, 240, 50);
    clockClickListener.setBorderSize(5);
    clockClickListener.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
    clockClickListener.setAlpha(0);
    clockClickListener.setAction(flexButtonCallback);
    clockClickListener.setPosition(0, 0, 240, 50);
    clockSettingContainer.add(clockClickListener);

    add(clockSettingContainer);

    returnButton.setXY(0, 0);
    returnButton.setBitmaps(touchgfx::Bitmap(BITMAP_LEFT_BUTTON_BACKGROUND_ID), touchgfx::Bitmap(BITMAP_LEFT_BUTTON_WHITE_BACKGROUND_ID));
    returnButton.setAction(buttonCallback);
    add(returnButton);

    buttonContainer.setPosition(283, 70, 30, 50);
    buttonContainer.setVisible(false);
    downButton.setXY(-9, 16);
    downButton.setBitmaps(touchgfx::Bitmap(BITMAP_ARROW_DOWN_V3_ID), touchgfx::Bitmap(BITMAP_ARROW_DOWN_V3_ID));
    downButton.setAction(buttonCallback);
    buttonContainer.add(downButton);

    upButton.setXY(-9, -14);
    upButton.setBitmaps(touchgfx::Bitmap(BITMAP_ARROW_UP_V3_ID), touchgfx::Bitmap(BITMAP_ARROW_UP_V3_ID));
    upButton.setAction(buttonCallback);
    buttonContainer.add(upButton);

    add(buttonContainer);

    titleTextArea.setPosition(60, 11, 200, 30);
    titleTextArea.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    titleTextArea.setLinespacing(0);
    titleTextArea.setTypedText(touchgfx::TypedText(T_TITLESETTINGS));
    titleTextArea.setAlpha(0);
    add(titleTextArea);
}

SettingsViewBase::~SettingsViewBase()
{

}

void SettingsViewBase::setupScreen()
{

}

void SettingsViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &languageClickListener)
    {
        //LanguageButtonIsClicked
        //When languageClickListener clicked call virtual function
        //Call languageButtonClicked
        languageButtonClicked();
    }
    if (&src == &clockClickListener)
    {
        //ClockButtonIsClicked
        //When clockClickListener clicked call virtual function
        //Call clockButtonClicked
        clockButtonClicked();
    }
    if (&src == &hourClickListener)
    {
        //HourIsClicked
        //When hourClickListener clicked call virtual function
        //Call hourIsClicked
        hourIsClicked();
    }
    if (&src == &minuteClickListener)
    {
        //MinuteIsClicked
        //When minuteClickListener clicked call virtual function
        //Call minuteIsClicked
        minuteIsClicked();
    }
}

void SettingsViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &upButton)
    {
        //UpButtonIsClicked
        //When upButton clicked call virtual function
        //Call pressUpKeyFunction
        pressUpKeyFunction();
    }
    if (&src == &downButton)
    {
        //DownButtonIsClicked
        //When downButton clicked call virtual function
        //Call pressDownKeyFunction
        pressDownKeyFunction();
    }
    if (&src == &returnButton)
    {
        //ReturnButtonIsClicked
        //When returnButton clicked call virtual function
        //Call returnButtonIsClicked
        returnButtonIsClicked();
    }
}

void SettingsViewBase::goToMainMenu()
{
    //SwitchScreenToMainMenuScreen
    //When goToMainMenu is called change screen to SelectingMenu
    //Go to SelectingMenu with no screen transition
    application().gotoSelectingMenuScreenNoTransition();
}

void SettingsViewBase::handleKeyEvent(uint8_t key)
{
    if(53 == key)
    {
        //HardwareCenterKeyAction
        //When hardware button 53 clicked call virtual function
        //Call pressCenterKeyFunction
        pressCenterKeyFunction();
    
    }

    if(50 == key)
    {
        //HardwareDownKeyAction
        //When hardware button 50 clicked call virtual function
        //Call pressDownKeyFunction
        pressDownKeyFunction();
    
    }

    if(52 == key)
    {
        //HardwareLeftKeyAction
        //When hardware button 52 clicked call virtual function
        //Call pressLeftKeyFunction
        pressLeftKeyFunction();
    
    }

    if(54 == key)
    {
        //HardwareRightKeyAction
        //When hardware button 54 clicked call virtual function
        //Call pressRightKeyFunction
        pressRightKeyFunction();
    
    }

    if(56 == key)
    {
        //HardwareUpKeyAction
        //When hardware button 56 clicked call virtual function
        //Call pressUpKeyFunction
        pressUpKeyFunction();
    
    }
}

void SettingsViewBase::goToCookingMenu()
{
    //GoToCookingScreen
    //When goToCookingMenu is called change screen to Cooking
    //Go to Cooking with no screen transition
    application().gotoCookingScreenNoTransition();
}
