/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/selectingmenu_screen/SelectingMenuViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

SelectingMenuViewBase::SelectingMenuViewBase() :
    flexButtonCallback(this, &SelectingMenuViewBase::flexButtonCallbackHandler),
    buttonCallback(this, &SelectingMenuViewBase::buttonCallbackHandler)
{
    __background.setPosition(0, 0, 1024, 600);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    background.setXY(0, 0);
    background.setBitmap(touchgfx::Bitmap(BITMAP_SELECTING_BACKGROUND_ID));
    add(background);

    clockTextArea.setPosition(114, 0, 93, 40);
    clockTextArea.setColor(touchgfx::Color::getColorFromRGB(41, 0, 96));
    clockTextArea.setLinespacing(0);
    touchgfx::Unicode::snprintf(clockTextAreaBuffer1, CLOCKTEXTAREABUFFER1_SIZE, "%s", touchgfx::TypedText(T_HOUR).getText());
    clockTextArea.setWildcard1(clockTextAreaBuffer1);
    touchgfx::Unicode::snprintf(clockTextAreaBuffer2, CLOCKTEXTAREABUFFER2_SIZE, "%s", touchgfx::TypedText(T_MINUTE).getText());
    clockTextArea.setWildcard2(clockTextAreaBuffer2);
    clockTextArea.setTypedText(touchgfx::TypedText(T_CLOCK));
    add(clockTextArea);

    selectedImage.setXY(105, 69);
    selectedImage.setBitmap(touchgfx::Bitmap(BITMAP_RICE_3D_ID));
    selectedImage.setAlpha(0);
    add(selectedImage);

    start_option_background.setPosition(35, 240, 250, 60);
    startBackground.setPosition(19, 0, 214, 60);
    startBackground.setColor(touchgfx::Color::getColorFromRGB(41, 0, 96));
    start_option_background.add(startBackground);

    startBackgroundLeft.setXY(3, 0);
    startBackgroundLeft.setBitmap(touchgfx::Bitmap(BITMAP_START_BUTTON_LEFT_ID));
    start_option_background.add(startBackgroundLeft);

    startBackgroundRight.setXY(233, 0);
    startBackgroundRight.setBitmap(touchgfx::Bitmap(BITMAP_START_BUTTON_RIGHT_ID));
    start_option_background.add(startBackgroundRight);

    add(start_option_background);

    startTextArea.setPosition(102, 202, 116, 34);
    startTextArea.setColor(touchgfx::Color::getColorFromRGB(0, 238, 227));
    startTextArea.setLinespacing(0);
    startTextArea.setTypedText(touchgfx::TypedText(T_START));
    startTextArea.setAlpha(0);
    add(startTextArea);

    optionTextArea.setPosition(50, 186, 220, 17);
    optionTextArea.setColor(touchgfx::Color::getColorFromRGB(154, 188, 255));
    optionTextArea.setLinespacing(0);
    optionTextArea.setTypedText(touchgfx::TypedText(T_WHITERICE));
    optionTextArea.setAlpha(0);
    add(optionTextArea);

    settingsButton.setXY(269, 0);
    settingsButton.setBitmaps(touchgfx::Bitmap(BITMAP_SETTINGS_BUTTON_BACKGROUND_ID), touchgfx::Bitmap(BITMAP_SETTINGS_BUTTON_WHITE_BACKGROUND_ID));
    settingsButton.setAction(buttonCallback);
    add(settingsButton);

    infoButton.setXY(0, 0);
    infoButton.setBitmaps(touchgfx::Bitmap(BITMAP_INFO_BUTTON_BACKGROUND_ID), touchgfx::Bitmap(BITMAP_INFO_BUTTON_WHITE_BACKGROUND_ID));
    infoButton.setAction(buttonCallback);
    add(infoButton);

    startButtonClickListener.setBoxWithBorderPosition(0, 0, 250, 60);
    startButtonClickListener.setBorderSize(5);
    startButtonClickListener.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
    startButtonClickListener.setAlpha(0);
    startButtonClickListener.setAction(flexButtonCallback);
    startButtonClickListener.setPosition(35, 180, 250, 60);
    add(startButtonClickListener);

    leftButton.setXY(42, 97);
    leftButton.setBitmap(touchgfx::Bitmap(BITMAP_ARROW_LEFT_ID));
    leftButton.setAlpha(0);
    add(leftButton);

    leftButtonClickListener.setBoxWithBorderPosition(0, 0, 55, 55);
    leftButtonClickListener.setBorderSize(5);
    leftButtonClickListener.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
    leftButtonClickListener.setAlpha(0);
    leftButtonClickListener.setAction(flexButtonCallback);
    leftButtonClickListener.setPosition(25, 88, 55, 55);
    add(leftButtonClickListener);

    rightButton.setXY(258, 97);
    rightButton.setBitmap(touchgfx::Bitmap(BITMAP_ARROW_RIGHT_ID));
    rightButton.setAlpha(0);
    add(rightButton);

    rightButtonClickListener.setBoxWithBorderPosition(0, 0, 55, 55);
    rightButtonClickListener.setBorderSize(5);
    rightButtonClickListener.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
    rightButtonClickListener.setAlpha(0);
    rightButtonClickListener.setAction(flexButtonCallback);
    rightButtonClickListener.setPosition(241, 88, 55, 55);
    add(rightButtonClickListener);
}

SelectingMenuViewBase::~SelectingMenuViewBase()
{

}

void SelectingMenuViewBase::setupScreen()
{

}

void SelectingMenuViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &rightButtonClickListener)
    {
        //TouchScreenRightButtonAction
        //When rightButtonClickListener clicked call virtual function
        //Call pressRightButtonAction
        pressRightButtonAction();
    }
    if (&src == &leftButtonClickListener)
    {
        //TouchScreenLeftButtonAction
        //When leftButtonClickListener clicked call virtual function
        //Call pressLeftButtonAction
        pressLeftButtonAction();
    }
    if (&src == &startButtonClickListener)
    {
        //StartButtonIsClicked
        //When startButtonClickListener clicked call virtual function
        //Call hardwareCenterKeyAction
        hardwareCenterKeyAction();
    }
}

void SelectingMenuViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &settingsButton)
    {
        //TouchScreenSettingButtonAction
        //When settingsButton clicked call virtual function
        //Call pressSettingButtonAction
        pressSettingButtonAction();
        //HideRemainingElementsSettings
        //When settingsButton clicked call virtual function
        //Call hideRemainingElements
        hideRemainingElements();
    }
    if (&src == &infoButton)
    {
        //TouchScreenInfoButtonAction
        //When infoButton clicked call virtual function
        //Call pressInfoButtonAction
        pressInfoButtonAction();
        //HideRemainingElementsInfo
        //When infoButton clicked call virtual function
        //Call hideRemainingElements
        hideRemainingElements();
    }
}

void SelectingMenuViewBase::goToCookingScreen()
{
    //GoToCookingScreen
    //When goToCookingScreen is called change screen to Cooking
    //Go to Cooking with no screen transition
    application().gotoCookingScreenNoTransition();
}

void SelectingMenuViewBase::goToInformationScreen()
{
    //GoToInformationScreen
    //When goToInformationScreen is called change screen to Information
    //Go to Information with no screen transition
    application().gotoInformationScreenNoTransition();
}

void SelectingMenuViewBase::goToSettingScreen()
{
    //GoToSettingScreen
    //When goToSettingScreen is called change screen to Settings
    //Go to Settings with no screen transition
    application().gotoSettingsScreenNoTransition();
}

void SelectingMenuViewBase::handleKeyEvent(uint8_t key)
{
    if(50 == key)
    {
        //HardwareDownKeyAction
        //When hardware button 50 clicked call virtual function
        //Call hardwareDownKeyAction
        hardwareDownKeyAction();
    
    }

    if(56 == key)
    {
        //HardwareUpKeyAction
        //When hardware button 56 clicked call virtual function
        //Call hardwareUpKeyAction
        hardwareUpKeyAction();
    
    }

    if(54 == key)
    {
        //HardwareRightKeyAction
        //When hardware button 54 clicked call virtual function
        //Call hardwareRightKeyAction
        hardwareRightKeyAction();
    
    }

    if(52 == key)
    {
        //HardwareLeftKeyAction
        //When hardware button 52 clicked call virtual function
        //Call hardwareLeftKeyAction
        hardwareLeftKeyAction();
    
    }

    if(53 == key)
    {
        //hardwareCenterKeyAction
        //When hardware button 53 clicked call virtual function
        //Call hardwareCenterKeyAction
        hardwareCenterKeyAction();
    
    }
}
