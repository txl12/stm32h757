/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef COOKINGVIEWBASE_HPP
#define COOKINGVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/cooking_screen/CookingPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/widgets/Button.hpp>
#include <touchgfx/EasingEquations.hpp>
#include <touchgfx/mixins/FadeAnimator.hpp>
#include <touchgfx/widgets/canvas/Circle.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/TextArea.hpp>

class CookingViewBase : public touchgfx::View<CookingPresenter>
{
public:
    CookingViewBase();
    virtual ~CookingViewBase();
    virtual void setupScreen();
    virtual void handleKeyEvent(uint8_t key);

    /*
     * Custom Actions
     */
    virtual void goToInformationMenu();
    virtual void goToSettingMenu();
    virtual void goToSelectingMenu();

    /*
     * Virtual Action Handlers
     */
    virtual void pressCenterKeyFunction()
    {
        // Override and implement this function in Cooking
    }
    virtual void pressDownKeyFunction()
    {
        // Override and implement this function in Cooking
    }
    virtual void pressUpKeyFunction()
    {
        // Override and implement this function in Cooking
    }
    virtual void pressRightKeyFunction()
    {
        // Override and implement this function in Cooking
    }
    virtual void pressLeftKeyFunction()
    {
        // Override and implement this function in Cooking
    }
    virtual void pressCancelButtonAction()
    {
        // Override and implement this function in Cooking
    }
    virtual void pressSettingButtonAction()
    {
        // Override and implement this function in Cooking
    }
    virtual void pressInfoButtonAction()
    {
        // Override and implement this function in Cooking
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Image cooking_background;
    touchgfx::Container corners_container;
    touchgfx::FadeAnimator< touchgfx::Button > infoButton;
    touchgfx::FadeAnimator< touchgfx::Button > settingsButton;
    touchgfx::FadeAnimator< touchgfx::Button > cancelButton;
    touchgfx::FadeAnimator< touchgfx::Image > timerImage;
    touchgfx::FadeAnimator< touchgfx::Image > selectedImage;
    touchgfx::Circle cookingCircle;
    touchgfx::PainterRGB565 cookingCirclePainter;
    touchgfx::FadeAnimator< touchgfx::TextAreaWithTwoWildcards > clockTextArea;
    touchgfx::FadeAnimator< touchgfx::TextAreaWithTwoWildcards > cookingTimeTextArea;
    touchgfx::FadeAnimator< touchgfx::TextArea > optionTextArea;

    /*
     * Wildcard Buffers
     */
    static const uint16_t CLOCKTEXTAREABUFFER1_SIZE = 10;
    touchgfx::Unicode::UnicodeChar clockTextAreaBuffer1[CLOCKTEXTAREABUFFER1_SIZE];
    static const uint16_t CLOCKTEXTAREABUFFER2_SIZE = 10;
    touchgfx::Unicode::UnicodeChar clockTextAreaBuffer2[CLOCKTEXTAREABUFFER2_SIZE];
    static const uint16_t COOKINGTIMETEXTAREABUFFER1_SIZE = 10;
    touchgfx::Unicode::UnicodeChar cookingTimeTextAreaBuffer1[COOKINGTIMETEXTAREABUFFER1_SIZE];
    static const uint16_t COOKINGTIMETEXTAREABUFFER2_SIZE = 10;
    touchgfx::Unicode::UnicodeChar cookingTimeTextAreaBuffer2[COOKINGTIMETEXTAREABUFFER2_SIZE];

private:

    /*
     * Canvas Buffer Size
     */
    static const uint32_t CANVAS_BUFFER_SIZE = 15360;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

    /*
     * Callback Declarations
     */
    touchgfx::Callback<CookingViewBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

};

#endif // COOKINGVIEWBASE_HPP
