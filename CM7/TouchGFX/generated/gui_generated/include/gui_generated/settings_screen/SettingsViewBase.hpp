/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef SETTINGSVIEWBASE_HPP
#define SETTINGSVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/settings_screen/SettingsPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/EasingEquations.hpp>
#include <touchgfx/mixins/FadeAnimator.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/Button.hpp>

class SettingsViewBase : public touchgfx::View<SettingsPresenter>
{
public:
    SettingsViewBase();
    virtual ~SettingsViewBase();
    virtual void setupScreen();
    virtual void handleKeyEvent(uint8_t key);

    /*
     * Custom Actions
     */
    virtual void goToMainMenu();
    virtual void goToCookingMenu();

    /*
     * Virtual Action Handlers
     */
    virtual void pressCenterKeyFunction()
    {
        // Override and implement this function in Settings
    }
    virtual void pressDownKeyFunction()
    {
        // Override and implement this function in Settings
    }
    virtual void pressLeftKeyFunction()
    {
        // Override and implement this function in Settings
    }
    virtual void pressRightKeyFunction()
    {
        // Override and implement this function in Settings
    }
    virtual void pressUpKeyFunction()
    {
        // Override and implement this function in Settings
    }
    virtual void languageButtonClicked()
    {
        // Override and implement this function in Settings
    }
    virtual void clockButtonClicked()
    {
        // Override and implement this function in Settings
    }
    virtual void hourIsClicked()
    {
        // Override and implement this function in Settings
    }
    virtual void minuteIsClicked()
    {
        // Override and implement this function in Settings
    }
    virtual void returnButtonIsClicked()
    {
        // Override and implement this function in Settings
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Image background;
    touchgfx::Container languageSettingContainer;
    touchgfx::Container selectedLanguageBackground;
    touchgfx::FadeAnimator< touchgfx::Image > selectedLanguageBackgroundLeft;
    touchgfx::Box selectedLanguageBackgroundMiddle;
    touchgfx::Image selectedLanguageBackgroundRight;
    touchgfx::TextArea languageOptionsTextArea;
    touchgfx::FadeAnimator< touchgfx::TextArea > languageOptionsSettingsTextArea;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  languageClickListener;
    touchgfx::Container clockSettingContainer;
    touchgfx::Container selectedClockBackground;
    touchgfx::FadeAnimator< touchgfx::Image > selectedClockBackgroundLeft;
    touchgfx::Box selectedClockBackgroundMiddle;
    touchgfx::Image selectedClockBackgroundRight;
    touchgfx::TextAreaWithOneWildcard hourSettingTextArea;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  hourClickListener;
    touchgfx::TextAreaWithOneWildcard minuteSettingTextArea;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  minuteClickListener;
    touchgfx::FadeAnimator< touchgfx::TextArea > hourDateOptionSettings;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  clockClickListener;
    touchgfx::FadeAnimator< touchgfx::Button > returnButton;
    touchgfx::Container buttonContainer;
    touchgfx::Button downButton;
    touchgfx::Button upButton;
    touchgfx::FadeAnimator< touchgfx::TextArea > titleTextArea;

    /*
     * Wildcard Buffers
     */
    static const uint16_t HOURSETTINGTEXTAREA_SIZE = 10;
    touchgfx::Unicode::UnicodeChar hourSettingTextAreaBuffer[HOURSETTINGTEXTAREA_SIZE];
    static const uint16_t MINUTESETTINGTEXTAREA_SIZE = 10;
    touchgfx::Unicode::UnicodeChar minuteSettingTextAreaBuffer[MINUTESETTINGTEXTAREA_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<SettingsViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;
    touchgfx::Callback<SettingsViewBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Callback Handler Declarations
     */
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

};

#endif // SETTINGSVIEWBASE_HPP
